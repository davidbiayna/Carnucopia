from Car import Car
import csv


class CarRegistry:

    def __init__(self):
        self._hire_out = None
        self._cars = []

    def load_from_file(self):
        try:
            with open("C:\\Temp\\CarRegistry.dat", "r") as file:
                reader = csv.reader(file)
                for line in reader:
                    car_data = line
                    car = Car(*car_data)
                    self._cars.append(car)
        except FileNotFoundError:
            print("CarRegistry.dat file not found")

    def get_cars(self):
        return self._cars

    def find_car(self, car_id):
        for car in self._cars:
            if car.registration_plate == car_id:
                return car
        return None

    @property
    def cars(self):
        return self._cars

    @property
    def number_of_cars(self):
        return len(self._cars)

    def display_car_registry_state(self):
        print("Current state of CarRegistry:")
        for car in self.cars:
            print(str(car))

    def add_car(self, car):
        if isinstance(car, Car):
            if car in self._cars:
                print(f"{car.registration_plate} is already in the registry")
            else:
                self._cars.append(car)
                print(f"{car.registration_plate} added to registry")
                self.display_car_registry_state()
                self.save_registry_to_file()

    def remove_car(self, car):
        if isinstance(car, Car) and car in self._cars:
            self._cars.remove(car)
            print(f"{car.registration_plate} removed from the registry")
            self.display_car_registry_state()

    def return_car_to_garage(self, car_id):
        for car in self._cars:
            if car.car_id == car_id:
                if not car.on_hire:
                    return f"Sorry, the car registered as {car.registration_plate} is already in the garage"
                else:
                    car.on_hire = False
                    return f"The car registered as {car.registration_plate} has successfully returned to the garage"

        return f"The car with ID of {car_id} is not the garage"

    @property
    def hire_out(self):
        return self._hire_out

    @hire_out.setter
    def hire_out(self, car_id):
        car = self.find_car(car_id)

        if not car:
            print(f" Sorry, the car {car_id} is not in the registry")
            return
        if car.hire_out:
            print(f"{car.registration_plate} is already out on hire")
        else:
            car.hire_out = True
            print(f"{car.registration_plate} is now out on hire")
            self.display_car_registry_state()
