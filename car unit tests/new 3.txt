from Car import Car
from CarRegistry import CarRegistry
import csv


class UI:
    def __init__(self, car_registry):
        self.car_registry = car_registry
        self.load_registry_from_file()
        self.exit_flag = False

    def load_registry_from_file(self):
        try:
            with open("C:\\Temp\\CarRegistry.dat", "r") as file:
                reader = csv.reader(file)
                for line in reader:
                    car_data = line
                    print(f"Loaded car data: {car_data}")
                    car = Car(*car_data)
                    self.car_registry.add_car(car)
        except FileNotFoundError:
            print("No existing registry file found.")

    def save_registry_to_file(self):
        with open("C:\\Temp\\CarRegistry.dat", "w") as file:
            writer = csv.writer(file)
            for car in self.car_registry.get_cars():
                car_data = [car.car_id, car.registration_plate, car.manufacturer, car.model_type, car.sipp,
                            car.seat_capacity, car.width, car.length, car.maximum_speed, car.mpg, car.on_hire]
                writer.writerow(car_data)

    def display_header(self):
        print("car_id", "registration_plate", "manufacturer", "model_type", "sipp",
              "seat_capacity", "width", "length", "maximum_speed", "mpg", "on_hire")

    def display_items(self):
        i = 1
        for car in self.car_registry.get_cars():
            print(f"{i} {str(car)}")
            i += 1

    def display_menu(self):
        print("Menu Options:")
        print("A - Add Car:")
        print("D - Delete Car:")
        print("H - Hire Out Car:")
        print("R - Return Car to Garage:")
        print("U - Update Car Registry:")
        print("X - Exit:")

    def process_options(self):
        while True:
            option = input("Enter your choice: ")

            if option == 'A':
                self.car_registry.add_car()
            elif option == 'D':
                self.car_registry.remove_car()
            elif option == 'H':
                self.car_registry.hire_out_car()
            elif option == 'R':
                self.car_registry.return_car_to_garage()
            elif option == 'U':
                self.car_registry.update_registry()
            elif option == 'X':
                if self.confirm_exit():
                    self.exit_flag = True
                break
            else:
                pass
                print("Invalid option.Please try again")

    def confirm_exit(self) -> bool:
        response = input('Are you sure you want to leave, Y or N').upper()
        while response not in {'Y', 'N'}:
            print("Invalid response. Please enter 'Y or 'N'.")
            response = input('Are you sure you want to leave, Y or N').upper()

        return response == 'Y'

    def add_car(self):
        car = self.gather_car_details()
        self.car_registry.add_car(car)
        self.car_registry.save_registry_to_file()

    def remove_car(self):
        pos = self.gather_position_number()
        car = self.car_registry.get_car_by_position(pos)
        if car:
            print(f"Car details: {str(car)}")
            confirmation = self.confirm_action("Are you sure you want to delete this car? (Y/N)")
            if confirmation:
                print("Car deleted successfully.")
            else:
                print("Deletion canceled.")
        else:
            print("Invalid position number")

    def hire_out_car(self):
        pos = self.gather_position_number()
        result = self.car_registry.hire_out_car(pos)
        print(result)

    def return_car_to_garage(self):
        pos = self.gather_position_number()
        result = self.car_registry.return_car_to_garage()
        print(result)

    def update_registry(self):
        self.car_registry.update_registry()

    def my_car_registry(self):
        return self.car_registry

    def gather_car_details(self) -> Car:
        registration_plate = input("Enter Registration Plate: ")
        manufacturer = input("Enter Manufacturer: ")
        model_type = input("Enter Model/Type")
        sipp = input("Enter SIPP code")
        seat_capacity = int(input("Enter Seat Capacity: "))
        width = float(input("Enter Width: "))
        length = float(input("Enter Length: "))
        maximum_speed = float(input("Enter Maximum Speed: "))
        mpg = float(input("Enter Range (MPG): "))
        on_hire = False

        return Car(
            registration_plate, manufacturer, model_type, sipp, seat_capacity, width, length, maximum_speed, mpg,
            on_hire
        )

    def gather_position_number(self) -> int:
        pos = int(input("Enter Position Number "))
        return pos

    def confirm_action(self, message: str) -> bool:
        response = input(f"{message} (Y/N)").upper()
        return response == 'Y'

